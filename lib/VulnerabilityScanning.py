import random
import re
import threading
from subprocess import Popen, PIPE
import subprocess
import time
import PyQt6.QtGui as QtGui

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from datetime import datetime
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader

from SendEmail import *

class VulnerabilityScanning():

    Well_Known_Ports = [
        {'port': '21',   'service': 'File Transfer Protocol (FTP)'},
        {'port': '22',   'service': 'Secure Shell (SSH)'},
        {'port': '23',   'service': 'Telnet'},
        {'port': '25',   'service': 'Simple Mail Transfer Protocol (SMTP)'},
        {'port': '80',   'service': 'Hypertext Transfer Protocol (HTTP)'},
        {'port': '110',  'service': 'Post Office Protocol (POP3)'},
        {'port': '143',  'service': 'Internet Message Access Protocol (IMAP)'},
        {'port': '443',  'service': 'SSL/TLS (HTTPs)'},
        {'port': '445',  'service': 'Microsoft-DS (SMB)'},
        {'port': '3389', 'service': 'Remote Desktop Protocol (RDP)'},
    ]
    def __init__(self):
        #super(VulnerabilityScanning, self).__init__()
        super().__init__()
    
    def clear(self):
        self.lineEdit_vulner.setText('')
        self.dropdown_typeScan.setCurrentIndex(0)
        self.textEdit_ResultScan.setPlainText('')
        self.lineEdit_commandvulner.setText('')
        self.lineEdit_vulner.setStyleSheet("border: 2px solid black;")
        self.lineEdit_vulner.setPlaceholderText("ex. example.com or IP ")
        self.progressBar_vulnerScan.setVisible(False)
        self.progressBar_vulnerScan.setValue(0)
        self.textEdit_ResultScan.setStyleSheet("border: 1px solid black;")

    def showWellKnownPorts(self):
        tmp1 = "Ports"
        tmp2 = "Services"
        for i in range(len(VulnerabilityScanning.Well_Known_Ports)):
            tmp1 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['port']}"
            tmp2 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['service']}"
        self.label_SimplePorts.setText(tmp1)
        self.label_SimpleServices.setText(tmp2)
        
    def typeScan(self):
        type = self.dropdown_typeScan.currentText()
        #print(type)
        return type

    def validate_input(self, target):

        has_special = any(char in "<>!@#$%^&*()_+-=?&" for char in target)
        if has_special:
            print("Special Characters Detected")
            self.lineEdit_vulner.setPlaceholderText("Invalid Input")
            # wait 2 seconds
            self.lineEdit_vulner.setStyleSheet("border: 2px solid Red;")
            self.lineEdit_vulner.setText('')
            return False
        else:
            self.lineEdit_vulner.setStyleSheet("border: 2px solid green;")
            return target.lower()
        
        
    def prepareCommand(self):
        # Check input is empty
        if self.lineEdit_vulner.text() == '':
            print("Data to send Empty")
            self.lineEdit_vulner.setStyleSheet("border: 2px solid red;")
            self.lineEdit_vulner.setPlaceholderText("Empty ")
            return
        
        valid_input = VulnerabilityScanning.validate_input(self, self.lineEdit_vulner.text())
        if valid_input == False:
            return
        
        # get the type of scan
        type = VulnerabilityScanning.typeScan(self)
        
        # Validate the input
        if 'nmap' in self.lineEdit_vulner.text():
            target = self.lineEdit_vulner.text()
        else:
            target = self.lineEdit_vulner.text()
        
        target = VulnerabilityScanning.validate_input(self, target)
        # Select Type of Scan and set the command
        if type == "Quick Scan":
            option = "-T4 -F" # -T4 = Aggressive, -F = Fast Scan

        elif type == "Stealth Scan":
            option = "-sS" # -sS = Stealth Scan

        elif type == "Aggressive Scan":
            option = "-T4 -A" # -T4 = Aggressive, -A = Agressive Scan Os Detection, Version Detection, Script Scanning, and Traceroute
            
        elif type == "Vulner.NSE Script":
            option = "-sV --script=vulners" 

        else:
            option = "" 
        
        # Set the command in the lineEdit
        self.lineEdit_commandvulner.setText("nmap " + option + " " + target)
        self.lineEdit_commandvulner.setStyleSheet("border: 2px solid green;")
        # Start Scan
        VulnerabilityScanning.start_scan(self, option, target)

    def start_scan(self, option, target):
        self.textEdit_ResultScan.clear() # Clear the textEdit
        # Start Thread
        VulnerabilityScanning.scan_thread = threading.Thread(target=VulnerabilityScanning.run_scan, args=(self, option, target,))
        VulnerabilityScanning.scan_thread.start()

    def run_scan(self, option, target):
        option = option.split()
        #print(option)
        # Start Progress Bar 0 to 99 until scan is complete
        self.progressBar_vulnerScan.setVisible(True)
        for i in range(100):
                self.progressBar_vulnerScan.setValue(i + random.randint(30, 40))
                threading.Thread(target=time.sleep(0.1)).start()
        try:
            #ใช้ *option เพื่อแยก args ทำให้สามารถใช้ใน subprocess.check_output ได้อย่างยืดหยุ่น
            
            result = subprocess.check_output(['nmap', *option, target], text=True)
            VulnerabilityScanning.update_result_text(self, result)

        except subprocess.CalledProcessError as e:
            print(f"Scan Error: {e.stderr}")
            VulnerabilityScanning.update_result_text(self, f"Scan Error: {e.stderr}")

    def update_result_text(self, text):
        self.progressBar_vulnerScan.setValue(100)
        cursor = self.textEdit_ResultScan.textCursor()
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.Start)
        cursor.insertText(text)
        self.textEdit_ResultScan.setTextCursor(cursor)
        
    def chech_output(self):
        if self.textEdit_ResultScan.toPlainText() == '':
            print("Data to send Empty")
            self.btn_createReportVulner.setEnabled(False)
            self.textEdit_ResultScan.setStyleSheet("border: 2px solid red;")
            self.textEdit_ResultScan.setPlaceholderText("Empty ")
            return
        else:
            self.btn_createReportVulner.setEnabled(True)
            self.textEdit_ResultScan.setStyleSheet("border: 2px solid green;")
            return

    def createReport(self):
        # Create a PDF canvas
        current_time = datetime.now()
        file_name = "/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/Reports/Vulner_Scanning_Report.pdf"
        self.btn_file_email_vulner.setText(file_name.split('/')[-1]) 
        target = self.lineEdit_vulner.text()
        option_scan = self.dropdown_typeScan.currentText() 
        if option_scan == "Type Scan":
            option_scan = "Default Scan"
        command = self.lineEdit_commandvulner.text()

        c = canvas.Canvas(file_name, pagesize=A4)
        
        # Define colors
        header_color = colors.HexColor('#A7B6D2')  # Light blue
        title_color = colors.HexColor('#0086D5')   # Dark blue
        text_color = colors.black

        # Define fonts and font sizes
        font_size = 12

        # First Page
        # Header section
        header_text = "| ISAN Security Gizmo Box |"
        c.setFont("Helvetica", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)

        # Logo and main title
        image_path = '/home/kali/Desktop/ISAN-Security-Gizmo-Box/assets/images/report_logo.png'
        img = ImageReader(image_path)
        img_width, img_height = 250, 200
        img_x = (A4[0] - img_width) / 2
        img_y = (A4[1] - img_height) / 2 + 3 * cm

        c.drawImage(img, img_x, img_y, width=img_width, height=img_height)

        # Main title
        vulner_text = "Vulnerability Scanning Report"
        c.setFont("Helvetica", 20)
        c.setFillColor(text_color)
        vulner_x = (A4[0] - c.stringWidth(vulner_text, "Helvetica", 20)) / 2
        vulner_y = img_y - 20
        c.drawString(vulner_x, vulner_y, vulner_text)

        # Subtitle and current date
        gizmo_text = "ISAN Security Gizmo Box"
        gizmo_x = (A4[0] - c.stringWidth(gizmo_text, "Helvetica", 20)) / 2
        gizmo_y = vulner_y - 50

        current_datetime = datetime.now().strftime("%d %B %Y %I:%M %p")
        c.setFont("Helvetica", 15)
        date_x = (A4[0] - c.stringWidth(current_datetime, "Helvetica", 15)) / 2
        date_y = gizmo_y - 50

        c.setFont("Helvetica", 20)
        c.drawString(gizmo_x, gizmo_y, gizmo_text)
        c.setFont("Helvetica", 15)
        c.drawString(date_x, date_y, current_datetime)

        # Start a new page (Second Page)
        c.showPage()
        # Second Page Content
        # Redraw the header on the second page
        c.setFont("Helvetica", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)
        
        # Add the "Scan Summary : target " at the center of the page.
        vulner_summary_text = f"Scan Summary : {target}"
        c.setFont("Helvetica", 16)
        c.setFillColor(title_color)  # Set the text color to dark blue
        text_width = c.stringWidth(vulner_summary_text, "Helvetica", 16)
        text_x = (A4[0] - text_width) / 2
        text_y = (A4[1] - 100)  # Adjust the y-coordinate as needed to center it vertically.

        c.drawString(text_x, text_y, vulner_summary_text)

        # Add the current date and time below the "Scan Summary" text
        date_time_text = datetime.now().strftime("%d %B %Y %I:%M %p")
        c.setFont("Helvetica", 12)
        date_time_x = (A4[0] - c.stringWidth(date_time_text, "Helvetica", 12)) / 2
        date_time_y = text_y - 20  # Adjust the vertical position as needed

        c.drawString(date_time_x, date_time_y, date_time_text)
        
        # "Nmap Options" Text
        options_text = f"Scan Mode: {option_scan}"
        c.setFont("Helvetica-Bold", 12)
        options_x = 72
        options_y = date_time_y - 50  # Adjust the vertical position as needed

        c.drawString(options_x, options_y, options_text)

        # "Output Nmap command" Text
        output_options_text = command
        c.setFont("Helvetica-Bold", 11)
        c.setFillColor(text_color)
        output_options_x = 90
        output_options_y = date_time_y - 80  # Adjust the vertical position as needed

        c.drawString(output_options_x, output_options_y, output_options_text)

        # ------------------ Edit Here ------------------
        scan_data = self.textEdit_ResultScan.toPlainText()
        lines_data = scan_data.splitlines()

        # ค้นหาข้อมูล PORT และ SERVICE
        ports = []
        services = []
        for line in lines_data:
            if "/tcp" in line:
                parts = line.split()
                if len(parts) == 3:
                    port = parts[0].split("/")[0]
                    service = parts[2]
                    ports.append(port)
                    services.append(service)
        
        ports_string = ', '.join(ports)
        services_string = ', '.join(services)

        # "Port" Text
        port_text = "Port"
        c.setFont("Helvetica-Bold", 12)
        c.setFillColor(title_color)
        port_x = 72
        port_y = date_time_y - 120  # Adjust the vertical position as needed

        c.drawString(port_x, port_y,  port_text)

        # "output Port" Text
        output_port_text = ports_string
        c.setFont("Helvetica-Bold", 11)
        c.setFillColor(text_color)
        output_port_x = 90
        output_port_y = date_time_y - 150  # Adjust the vertical position as needed

        c.drawString(output_port_x, output_port_y,  output_port_text)

        # "Service" Text
        service_text = "Service"
        c.setFont("Helvetica-Bold", 12)
        c.setFillColor(title_color)
        service_x = 72
        service_y = date_time_y - 180  # Adjust the vertical position as needed

        c.drawString(service_x, service_y,  service_text)

        # "output service" Text
        output_service_text = services_string
        c.setFont("Helvetica-Bold", 11)
        c.setFillColor(text_color)
        output_service_x = 90
        output_service_y = date_time_y - 210  # Adjust the vertical position as needed

        c.drawString(output_service_x, output_service_y,  output_service_text)

        # "OS" Text
        os_text = "OS"
        c.setFont("Helvetica-Bold", 12)
        c.setFillColor(title_color)
        os_x = 72
        os_y = date_time_y - 240  # Adjust the vertical position as needed

        c.drawString(os_x, os_y, os_text)

        # "output OS" Text
        output_os_text = "Output OS"
        c.setFont("Helvetica-Bold", 11)
        c.setFillColor(text_color)
        output_os_x = 90
        output_os_y = date_time_y - 270  # Adjust the vertical position as needed

        c.drawString(output_os_x, output_os_y,  output_os_text)

        # "CVE" Text
        cve_text = "CVE"
        c.setFont("Helvetica-Bold", 12)
        c.setFillColor(title_color)
        cve_x = 72
        cve_y = date_time_y - 300  # Adjust the vertical position as needed

        c.drawString(cve_x, cve_y, cve_text)

        # "output CVE" Text
        output_cve_text = "Output OS"
        c.setFont("Helvetica-Bold", 11)
        c.setFillColor(text_color)
        output_cve_x = 90
        output_cve_y = date_time_y - 330  # Adjust the vertical position as needed

        c.drawString(output_cve_x, output_cve_y,  output_cve_text)
        
        # Save the PDF
        c.save()

        # Convert PDF to PNG
        VulnerabilityScanning.convert_pdf_to_png(self)

    def send_email(self):
        self.btn_sendReportToMail.setText("Sending...")

        to_receiver_email = self.lineEdit_toEmail.text()
        subject_receiver = self.lineEdit_subjectEmail.text()
        body = self.textEdit_bodyEmail.toPlainText()
        file = "/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/Reports/Vulner_Scanning_Report.pdf"
        
        SendEmail.sending(SendEmail, to_receiver_email, subject_receiver, body, file)
    
    def convert_pdf_to_png(self):
        import os
        import fitz

        # Path to PDF file
        pdf_file = r"/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/Reports/Vulner_Scanning_Report.pdf"

        # Open PDF file
        pdf_doc = fitz.open(pdf_file)

        # Output directory
        output_dir = r"/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/ImagesfromPDF/"  # Corrected path

        # Iterate through pages and convert to PNG
        for page_number, page in enumerate(pdf_doc):
            pix = page.get_pixmap()
            output_file = os.path.join(output_dir, f"output_page_vulner_{page_number}.png")
            pix.save(output_file, "png")

        # Close PDF file
        pdf_doc.close()

        self.label_report_vulner.setPixmap(QtGui.QPixmap("/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/ImagesfromPDF/output_page_vulner_0.png"))
        self.label_countPageReport_vulner.setText("0")

    def set_pdf_viewer(self, step):
        page_number = self.label_countPageReport_vulner.text()
        min_page = 0

        number = 0
        if step == "next":
            number = int(page_number) + 1
        elif step == "back":
            number = int(page_number) - 1
            number = max(number, min_page)
        else:
            number = 0

        self.label_countPageReport_vulner.setText(str(number))
        self.label_report_vulner.setPixmap(QtGui.QPixmap(f"/home/kali/Desktop/ISAN-Security-Gizmo-Box/data/ImagesfromPDF/output_page_vulner_{number}.png"))
            
            
