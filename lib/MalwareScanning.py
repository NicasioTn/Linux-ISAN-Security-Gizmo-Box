import configparser
import json
import os
import requests
from PyQt6.QtWidgets import QFileDialog, QDialog
from pathlib import Path
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from PyQt6.QtGui import QMovie
import PyQt6.QtGui as QtGui
import threading
from datetime import datetime

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics import renderPDF
from reportlab.graphics.shapes import Drawing
from reportlab.platypus import Table, TableStyle

from SendEmail import *

from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QImageReader, QPixmap

class GifThread(QThread):
    image_loaded = pyqtSignal(QPixmap)

    def __init__(self, gif_path):
        super().__init__()
        self.gif_path = gif_path

    def run(self):
        reader = QImageReader(self.gif_path)
        self.frame_count = reader.imageCount()

        for i in range(self.frame_count):
            image = reader.read()
            if image.isNull():
                break

            pixmap = QPixmap.fromImage(image)
            self.image_loaded.emit(pixmap)

        self.quit()

class MalwareScanning(QDialog):
    api_url_scan = ''
    api_vt_key = ''
    api_file_scan = ''
    api_file_analysis = ''

    def __init__(self):
        #super(MalwareScanning, self).__init__()
        super().__init__()
    
    def loadAPIKey(self):
        # Fetch API Key from config file
        config = configparser.ConfigParser()
        configFilePath = '/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/init.conf'
        config.read(configFilePath)
        if 'Malware' in config:
            MalwareScanning.api_vt_key = config.get('Malware', 'virustotal_api_key')
            MalwareScanning.api_url_scan = config.get('Malware', 'api_url_scan')
            MalwareScanning.api_file_scan = config.get('Malware', 'api_file_scan')
            MalwareScanning.api_file_analysis = config.get('Malware', 'api_file_analysis')
            # print(f'VT API Key: {MalwareScanning.api_vt_key}')
            # print(f'VT API URL: {MalwareScanning.api_url_scan}')
            # print(f'VT API File: {MalwareScanning.api_file_scan}')
            # print(f'VT API Analysis: {MalwareScanning.api_file_analysis}')
        else:
            print('Section "Malware" does not exist in the config file.')
        
        return config.get('Malware', 'virustotal_api_key')
    
    def saveAPIKey(self, api_key):
        self.api_vt_key = api_key # get api key from line api settings
        print(self.api_vt_key)

        config = configparser.ConfigParser()
        configFilePath = '/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/init.conf'
        config.read(configFilePath)
        if 'Malware' in config:
            config.set('Malware', 'virustotal_api_key', str(api_key))
            print(f'Set API KEY: {api_key}')
        else:
            print('Section "Malware" does not exist in the config file.')

        with open(configFilePath, 'w') as configfile:
            config.write(configfile)

    def clear(self):
        print("Clear")
        self.lineEdit_malware.setText('')
        self.lineEdit_malware.setStyleSheet('''QLineEdit {
  border: 1px solid black;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}
''')
        self.lineEdit_malware.setPlaceholderText('ex. https:// or file')
        self.label_maliciousResult.setText('0')
        self.label_suspiciousResult.setText('0')
        self.label_undetectedResult.setText('0')
        self.label_namefileResult.setText('-')
        self.label_typeFileResult.setText('-')
        self.label_typeScanResult.setText('-')
        self.label_sha256Result.setText('-')
        self.label_siteNameResult.setText('-')
        self.label_dateTimeDetail.setText('-')
        MalwareScanning.show_resultimage(self, type='scan', status='default')
        MalwareScanning.loadAPIKey(self)

    # Scan Malware Function
    def scanMalware(self):
        print("Scan Malware")
        if self.lineEdit_malware.text() == '':
            print("Data to send Empty")
            self.lineEdit_malware.setStyleSheet('''QLineEdit {
  border: 1px solid red;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}
''')
            self.lineEdit_malware.setPlaceholderText("Empty")
            return
        
        if os.path.exists(self.lineEdit_malware.text()) == True:
            print("File Scan")
            try:
                thread = threading.Thread(target= MalwareScanning.FileScan, args=(self,))
                thread.start()
                
            except Exception as e:
                print("Error: " + str(e))
                # MalwareScanning.FileScan(self)

        elif self.lineEdit_malware.text().startswith('https://') or self.lineEdit_malware.text().startswith('http://'):
            print("URL Scan")
            try:
                thread = threading.Thread(target= MalwareScanning.URLScan, args=(self,))
                thread.start()

            except Exception as e:
                print("Error: " + str(e))
                #MalwareScanning.URLScan(self)
            
        else:
            print("Invalid File or URL")
            self.lineEdit_malware.setStyleSheet('''QLineEdit {
  border: 1px solid red;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}
''')
            self.lineEdit_malware.setText("")
            self.lineEdit_malware.setPlaceholderText("Invalid URL or File")
    
    def FileScan(self):
        print("File Scan")
        input = self.lineEdit_malware.text()
        url = MalwareScanning.api_file_scan
        files = { "file": open(input, "rb") }
        headers = {
            "accept": "application/json",
            "x-apikey": MalwareScanning.api_vt_key,
        }

        response = requests.post(url, files=files, headers=headers)

        #print(response.text)
        # response code detect
        if response.status_code == 200:
            print("File Scan Success")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid green;")
            self.lineEdit_malware.setPlaceholderText("File Scan Success")
        elif response.status_code == 400:
            print("Bad request!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setPlaceholderText("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid orange;")
            self.lineEdit_malware.setPlaceholderText("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid yellow;")
            self.lineEdit_malware.setPlaceholderText("Server error!")
        
        id = response.json()['data']['id']
        print(id)
        # File Analyses
        MalwareScanning.fileAnalyses(self, id)

    def fileAnalyses(self, id):
        url = MalwareScanning.api_file_analysis + "/" + id

        headers = {
            "accept": "application/json",
            "x-apikey": MalwareScanning.api_vt_key
        }

        response = requests.get(url, headers=headers)
        #print(response.text)
        if response.status_code == 200:
            print("File Analyses Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
        id = response.json()['meta']['file_info']['sha256']
        print(id)
        MalwareScanning.fileReport(self, id)
    
    def fileReport(self, id):
        url = MalwareScanning.api_file_scan + "/" + id

        headers = {
            "accept": "application/json",
            "x-apikey": MalwareScanning.api_vt_key
        }

        response = requests.get(url, headers=headers)
        #print(response.text)
        if response.status_code == 200:
            print("File Report Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")

        # show data File Report
        MalwareScanning.showData(self, response, type='file')
        
    def URLScan(self):
        print("URL Scan")
        input = self.lineEdit_malware.text()
        url = MalwareScanning.api_url_scan

        payload = { "url": input }
        headers = {
            "accept": "application/json",
            "x-apikey": MalwareScanning.api_vt_key,
            "content-type": "application/x-www-form-urlencoded"
        }

        response = requests.post(url, data=payload, headers=headers)
        #print(response.text)

        # response code detect
        if response.status_code == 200:
            print("URL Scan Success")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid green;")
            self.lineEdit_malware.setPlaceholderText("URL Scan Success")
        elif response.status_code == 400:
            print("Bad request!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid red;")
            self.lineEdit_malware.setPlaceholderText("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid orange;")
            self.lineEdit_malware.setPlaceholderText("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
            #self.lineEdit_malware.setStyleSheet("border: 1px solid yellow;")
            self.lineEdit_malware.setPlaceholderText("Server error!")

        id = response.json()['data']['id'].split('-')[1]
        print(id)

        MalwareScanning.URLReport(self, id)

    def URLReport(self, id):
        url = MalwareScanning.api_url_scan + "/" + id
        print(url)
        headers = {
            "accept": "application/json",
            "x-apikey": MalwareScanning.api_vt_key
        }
        response = requests.get(url, headers=headers)
        #print(response.text)
        if response.status_code == 200:
            print("URL Report Success")
        elif response.status_code == 400:
            print("Bad request!")
        elif response.status_code == 401:
            print("Invalid access token!")
        elif response.status_code == 500:
            print("Server error!")
        
        # show data URL Report
        MalwareScanning.showData(self, response, type='url')

    def showData(self, response, type):
        self.label_dateTimeDetail.setText(str(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        #print(response.text)
        MalwareScanning.get_result_scan(self, response, type) # send data to get_result_scan function

        if type == 'file':
            # rename label
            self.label_namefileResult.setText('File Name')
            self.label_typeFile.setText('File Type')
            self.label_typeScan.setText('Scan Type')
            self.label_sha256.setText('SHA-256')
            self.label_siteNameResult.setText('File Size')
            # show data
            
            try:
                
                maliciouse = response.json()['data']['attributes']['last_analysis_stats']['malicious']
                suspicious = response.json()['data']['attributes']['last_analysis_stats']['suspicious']
                undetected = response.json()['data']['attributes']['last_analysis_stats']['undetected']

                self.label_maliciousResult.setText(str(maliciouse))
                self.label_suspiciousResult.setText(str(suspicious))
                self.label_undetectedResult.setText(str(undetected))

                # Size formatting
                size = response.json()['data']['attributes']['size']
                if size < 1024:
                    size = str(size) + " Bytes"
                elif size < 1048576:
                    size = str(round(size/1024, 2)) + " KB"
                elif size < 1073741824:
                    size = str(round(size/1048576, 2)) + " MB"
                elif size < 1099511627776:
                    size = str(round(size/1073741824, 2)) + " GB"
                else:
                    size = str(round(size/1099511627776, 2)) + " TB"
                
                self.label_siteNameResult.setText(size)\
                    if response.json()['data']['attributes']['size'] != 0 else self.label_siteNameResult.setText('-')

                self.label_namefileResult.setText(response.json()['data']['attributes']['names'][0] ) \
                    if response.json()['data']['attributes']['names'][0] != [] else self.label_namefileResult.setText('-')
                
                
                filetype = response.json()['data']['attributes']['type_description']
                self.label_typeFileResult.setText(filetype) \
                    if filetype != '' else self.label_typeFileResult.setText('-')
                
                scantype = response.json()['data']['type']
                self.label_typeScanResult.setText(scantype) \
                    if scantype != '' else self.label_typeScanResult.setText('-')
                
                hashfile =  response.json()['data']['attributes']['sha256']
                self.label_sha256Result.setText(hashfile) \
                    if hashfile != '' else self.label_sha256Result.setText('-')
                
            except KeyError as e:
                print("Key Error" + str(e))
            except IndexError as e:
                print("Index Error" + str(e))
            except TypeError as e:
                print("Type Error" + str(e))
            except Exception as e:
                print("Exception Error" + str(e))

            
            # show image from analysis
            if int(self.label_maliciousResult.text()) > 0:
                print("Malware")
                #self.image_analysis.setPixmap(QPixmap("./assets/images/FileMalware.png"))
                MalwareScanning.show_resultimage(self, type='file', status='malware')
            else:
                print("No Malware")
                #self.image_analysis.setPixmap(QPixmap("./assets/images/FileCheck.png"))
                MalwareScanning.show_resultimage(self ,type='file', status='no_malware')
                
        if type == 'url':
            # rename label
            self.label_namefileResult.setText('URL')
            self.label_typeFile.setText('TLD')
            self.label_typeScan.setText('Scan Type')
            self.label_sha256.setText('SHA-256')
            self.label_siteNameResult.setText('Site Name')
            # show data
            try:

                maliciouse = response.json()['data']['attributes']['last_analysis_stats']['malicious']
                suspicious = response.json()['data']['attributes']['last_analysis_stats']['suspicious']
                undetected = response.json()['data']['attributes']['last_analysis_stats']['undetected']

                self.label_maliciousResult.setText(str(maliciouse))
                self.label_suspiciousResult.setText(str(suspicious))
                self.label_undetectedResult.setText(str(undetected))
                
                destination_url = response.json()['data']['attributes']['last_final_url']
                self.label_namefileResult.setText(destination_url) \
                    if destination_url != '' else self.label_namefileResult.setText('-')
                
                tld_url = response.json()['data']['attributes']['tld']
                self.label_typeFileResult.setText(tld_url) \
                    if tld_url != '' else self.label_typeFileResult.setText('-')

                scan_type = response.json()['data']['type'].upper()
                self.label_typeScanResult.setText(scan_type) \
                    if scan_type != '' else self.label_typeScanResult.setText('-')
                
                hash_url = response.json()['data']['attributes']['last_http_response_content_sha256']
                self.label_sha256Result.setText(hash_url) \
                    if hash_url != '' else self.label_sha256Result.setText('-')
                
                #self.label_siteNameResult.setText(response.json()['data']['attributes']['title'])
                site_name = response.json()['data']['attributes']['html_meta']['title'][0]  \
                    if response.json()['data']['attributes']['html_meta']['title'] != [] else self.label_siteNameResult.setText('-')
                self.label_siteNameResult.setText(site_name) \
                    if site_name != [] else self.label_siteNameResult.setText('-')
                
            except KeyError as e:
                print("Key Error" + str(e))
                try:
                    site_name = response.json()['data']['attributes']['last_final_url'].split('/')[2] 
                except KeyError as e:
                    site_name = "-"
                #print(site_name)
                self.label_siteNameResult.setText(site_name) \
                    if site_name != [] else self.label_siteNameResult.setText('-')

            # show image from analysis
            if int(self.label_maliciousResult.text()) > 0:
                print("Malware")
                #malware_logo = QPixmap("./assets/images/URLMalware.png")
                #self.image_analysis.setPixmap(malware_logo)
                MalwareScanning.show_resultimage(self, type='url', status='malware')
            else:
                print("No Malware")
                #urlcheck_logo = QPixmap("./assets/images/URLCheck.png")
                #self.image_analysis.setPixmap(urlcheck_logo)
                MalwareScanning.show_resultimage(self, type='url', status='no_malware')

    def createReport(self):
        print("Create Report Malware")
        
        pdf_file_path = "/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/Reports/Malware_Scanning_Report.pdf"
        self.btn_file_email_malware.setText(pdf_file_path.split('/')[-1])
        target = self.lineEdit_malware.text()
        malicious_number = self.label_maliciousResult.text()
        suspicious_number = self.label_suspiciousResult.text()
        undetected_number = self.label_undetectedResult.text()

        # Create a PDF canvas
        c = canvas.Canvas(pdf_file_path, pagesize=A4)

        # Define colors
        header_color = colors.HexColor('#A7B6D2')  # Light blue
        title_color = colors.HexColor('#0086D5')   # Dark blue
        text_color = colors.black

        # Color definitions for the pie chart
        malicious_color = colors.HexColor('#f16070')  # Red
        undetected_color = colors.HexColor('#3bb143')  # Blue
        suspicious_color = colors.HexColor('#f8ac58')  # Yellow

        # Define fonts and font sizes
        font_size = 12

        # -----------------------------------------------  First Page
        # Header section
        header_text = "| ISAN Security Gizmo Box |"
        c.setFont("Helvetica", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)

        # Logo and main title
        image_path = '/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/assets/images/report_logo.png'
        img = ImageReader(image_path)
        img_width, img_height = 250, 200
        img_x = (A4[0] - img_width) / 2
        img_y = (A4[1] - img_height) / 2 + 3 * cm

        c.drawImage(img, img_x, img_y, width=img_width, height=img_height)

        # Main title
        malware_text = "Malware Scanning Report"
        c.setFont("Helvetica", 20)
        c.setFillColor(text_color)
        malware_x = (A4[0] - c.stringWidth(malware_text, "Helvetica", 20)) / 2
        malware_y = img_y - 20
        c.drawString(malware_x, malware_y, malware_text)

        # Subtitle and current date
        gizmo_text = "ISAN Security Gizmo Box"
        gizmo_x = (A4[0] - c.stringWidth(gizmo_text, "Helvetica", 20)) / 2
        gizmo_y = malware_y - 50

        current_datetime = datetime.now().strftime("%d %B %Y %I:%M %p") # 07 October 2023 11:55 AM
        c.setFont("Helvetica", 15)
        date_x = (A4[0] - c.stringWidth(current_datetime, "Helvetica", 15)) / 2
        date_y = gizmo_y - 50

        c.setFont("Helvetica", 20)
        c.drawString(gizmo_x, gizmo_y, gizmo_text)
        c.setFont("Helvetica", 15)
        c.drawString(date_x, date_y, current_datetime)

        # break page
        c.showPage() # -----------------------------------------------  Second Page
        
        # Second Page Content
        # Redraw the header on the second page
        c.setFont("Helvetica", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)
        
        # Add the "Scan Summary : https://www.example.com" at the center of the page.
        scan_summary_text = f"Scan Summary : {target}"
        c.setFont("Helvetica", 16)
        c.setFillColor(title_color)  # Set the text color to dark blue
        text_width = c.stringWidth(scan_summary_text, "Helvetica", 16)
        text_x = (A4[0] - text_width) / 2
        text_y = (A4[1] - 100)  # Adjust the y-coordinate as needed to center it vertically.

        c.drawString(text_x, text_y, scan_summary_text)

        # Add the current date and time below the "Scan Summary" text
        date_time_text = datetime.now().strftime("%d %B %Y %I:%M %p") # 07 October 2023 11:55 AM
        c.setFont("Helvetica", 12)
        date_time_x = (A4[0] - c.stringWidth(date_time_text, "Helvetica", 12)) / 2
        date_time_y = text_y - 20  # Adjust the vertical position as needed

        c.drawString(date_time_x, date_time_y, date_time_text)
        
        # Create a pie chart
        #data = [2, 3, 1]
        data = [int(malicious_number), int(suspicious_number), int(undetected_number)]
        labels = ['Malicious', 'Suspicious', 'Undetected']

        pie = Pie()
        pie.width = pie.height = 150  # Set the pie chart size to 100x100
        pie.data = data
        pie.labels = labels
        pie.slices.strokeColor = colors.white  # Add a white border to the pie chart slices
        pie.slices.strokeWidth = 0.5  # Adjust the border width as needed
        pie.slices[0].fillColor = malicious_color
        pie.slices[1].fillColor = suspicious_color
        pie.slices[2].fillColor = undetected_color

        # Calculate the coordinates to center the pie chart horizontally and move it up
        pie_x = (A4[0] - pie.width) / 2
        pie_y = (A4[1] - pie.height) / 2 + 150  # Adjust the vertical position as needed

        # Create a drawing and add the pie chart
        d = Drawing(A4[0], A4[1])
        d.add(pie)

        # Add the drawing to the PDF
        renderPDF.draw(d, c, pie_x, pie_y)

        # Define a function to create a section with title and table
        def create_section(title, data, title_color, col_widths, row_heights, y_offset):
            title_font_size = 14
            title_x = 72
            title_y = A4[1] - 350 - 2 * cm - y_offset
            c.setFont("Helvetica", title_font_size)
            c.setFillColor(title_color)
            c.drawString(title_x, title_y, title)
            # c.line(title_x, title_y - 3, title_x + c.stringWidth(title, "Helvetica", title_font_size), title_y - 3)

            table = Table(data, colWidths=col_widths, rowHeights=row_heights)
            table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('BOTTOMPADDING', (0, -1), (0, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, text_color)
            ]))
            table.wrapOn(c, 0, 0)
            table.drawOn(c, 80, title_y - 250)

        result_json = MalwareScanning.result_json
        type = MalwareScanning.result_type

        if type == 'file':
            result_details_data = result_json.json()['data']['attributes']['last_analysis_results']
                
        elif type == 'url':
            result_details_data = result_json.json()['data']['attributes']['last_http_response_headers']
            result_lists = [[key, value] for key, value in result_details_data.items()]
        
        col_widths = [230] * 2
        row_heights = [20] * len(result_lists) # Change the number of row heights to match the number of rows in the data
        create_section("Headers", result_lists[:11], title_color, col_widths, row_heights, 0)

        # Add Outgoing links
        outgoing_text = "Outgoing links"
        outgoing_x = 72
        outgoing_y = pie_y - 350
        c.setFont("Helvetica", 12)
        c.drawString(outgoing_x, outgoing_y, outgoing_text)

        # Add Outgoing links
        outgoing_output_text = target
        outgoing_output_x = 80
        outgoing_output_y = pie_y - 380
        c.setFont("Helvetica", 10)
        c.setFillColor(colors.black)
        c.drawString(outgoing_output_x, outgoing_output_y, outgoing_output_text)

        # break page
        c.showPage() # -----------------------------------------------  Third Page
        
        # Third Page Content
        # Redraw the header on the Third page
        c.setFont("Helvetica", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)

        # Add the "Detection" at the center of the page.
        Detection_text = "Detection"
        c.setFont("Helvetica", 16)
        c.setFillColor(title_color)  # Set the text color to dark blue
        text_width = c.stringWidth(scan_summary_text, "Helvetica", 16)
        Detection_text_x = (A4[0] - text_width) / 2 
        Detection_text_y = (A4[1] - 100)  # Adjust the y-coordinate as needed to center it vertically.

        c.drawString(Detection_text_x, Detection_text_y, Detection_text)

        # Add the current date and time below the "Scan Summary" text
        vendors_text = "               Security vendors' analysis"
        c.setFont("Helvetica", 12)
        vendors_text_x = (A4[0] - c.stringWidth(vendors_text, "Helvetica", 12)) /2
        vendors_text_y = text_y - 20  # Adjust the vertical position as needed

        c.drawString(vendors_text_x, vendors_text_y, vendors_text)
        
        # Define a function to create a section with title and table
        def create_section(title, data, title_color, col_widths, row_heights, y_offset):
            title_font_size = 14
            title_x = 72
            title_y = A4[1] - 500 - 2 * cm - y_offset
            c.setFont("Helvetica", title_font_size)
            c.setFillColor(title_color)
            c.drawString(title_x, title_y, title)
            # c.line(title_x, title_y - 3, title_x + c.stringWidth(title, "Helvetica", title_font_size), title_y - 3)

            table = Table(data, colWidths=col_widths, rowHeights=row_heights)
            table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('BOTTOMPADDING', (0, -1), (0, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, text_color)
            ]))
            table.wrapOn(c, 0, 0)
            table.drawOn(c, 80, title_y - 200)

        result_json = MalwareScanning.result_json
        type = MalwareScanning.result_type

        if type == 'file':
            vendors_summary_data = result_json.json()['data']['attributes']['last_analysis_results']
            #print(vendors_summary_data)
            vendors_lists = [[data["engine_name"], data["category"]] for data in vendors_summary_data.values()]
            sorted_lists = sorted(vendors_lists, key=lambda x: (x[1] != 'malicious', x))

        elif type == 'url':
            vendors_summary_data = result_json.json()['data']['attributes']['last_analysis_results']
            #print(vendors_summary_data)
            vendors_lists = [[data["engine_name"], data["result"]] for data in vendors_summary_data.values()]
            sorted_lists = sorted(vendors_lists, key=lambda x: (x[1] != 'malware', x))
            #print(sorted_lists)

        col_widths = [230] * 2
        row_heights = [20] * 30
        create_section("", sorted_lists[:30], title_color, col_widths, row_heights, 0)


        # Save the PDF
        c.save()

        MalwareScanning.convert_pdf_to_png(self)        
    
    def get_result_scan(self, data, type):
        MalwareScanning.result_json = data
        MalwareScanning.result_type = type
            

    def convert_pdf_to_png(self):
        import os
        import fitz

        # Path to PDF file
        pdf_file = r"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/Reports/Malware_Scanning_Report.pdf"  # Corrected path

        # Open PDF file
        pdf_doc = fitz.open(pdf_file)

        # Output directory
        output_dir = r"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/ImagesfromPDF/"  # Corrected path

        # Iterate through pages and convert to PNG
        for page_number, page in enumerate(pdf_doc):
            pix = page.get_pixmap()
            output_file = os.path.join(output_dir, f"output_page_malware_{page_number}.png")
            pix.save(output_file, "png")

        # Close PDF file
        pdf_doc.close()

        self.label_Report_malware.setPixmap(QtGui.QPixmap("/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/ImagesfromPDF/output_page_malware_0.png"))
        self.label_countPageReport_malware.setText("0")

    def set_pdf_viewer(self, step):
        page_number = self.label_countPageReport_malware.text()
        min_page = 0

        number = 0
        if step == "next":
            number = int(page_number) + 1
        elif step == "back":
            number = int(page_number) - 1
            number = max(number, min_page)
        else:
            number = 0

        self.label_countPageReport_malware.setText(str(number))
        self.label_Report_malware.setPixmap(QtGui.QPixmap(f"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/ImagesfromPDF/output_page_malware_{number}.png"))
             
    def send_email(self):
        self.btn_sendReport_email_malware.setText("Sending...")

        # Get data from Email Page
        to_receiver_email = self.lineEdit_to_email_malware.text()
        subject_receiver = self.lineEdit_subject_email_malware.text()
        body = self.textEdit_body_email_malware.toPlainText()
        file = "/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/data/Reports/Malware_Scanning_Report.pdf"
        SendEmail.sending(SendEmail, to_receiver_email, subject_receiver, body, file)

    def openFileScanning(self):
        print("Open File")
        filepath, ok = QFileDialog.getOpenFileName(
            self,
            "Select a File", 
            os.getcwd(), 
            "All files (*.*)"
        )
        if filepath:
            path = Path(filepath)
            self.lineEdit_malware.setText(str(path))
            if path.exists() != True: # check if file exists 
                print(f"File exists at: {path.exists()}")
            print(f"Get file at: {path}")

            return path
        
    def show_resultimage(self, type, status): # set image from analysis
        # try:
        #     image = type + "-" + status
        #     #print(image)
        #     self.movie = QMovie(f"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/assets/images/{image}.gif")
        #     self.movie.setCacheMode(QMovie.CacheMode.CacheAll)
        #     self.movie.setSpeed(100)
        #     self.image_analysis.setMovie(self.movie)
        #     self.image_analysis.setScaledContents(True)
        #     self.image_analysis.width()
        #     self.image_analysis.height()
        #     self.movie.start()
        # except Exception as e:
        #     print("Exception Error" + str(e))

        image = type + "-" + status
        # self.image_analysis.setPixmap(QPixmap(f"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/assets/images/{image}.png"))

        gif_thread = GifThread(f"/home/kali/Desktop/Linux-ISAN-Security-Gizmo-Box/assets/images/{image}.gif")
        gif_thread.image_loaded.connect(self.update_image)
        gif_thread.start()
        gif_thread.wait()


   


