import os
import random
import re
import threading
from subprocess import Popen, PIPE
import subprocess
import time
import PyQt6.QtGui as QtGui
from PyQt6.QtCore import QTimer

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from datetime import datetime
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Table, TableStyle

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
pdfmetrics.registerFont(TTFont('Barlow-Regular', '/usr/share/fonts/Barlow-Regular.ttf'))
pdfmetrics.registerFont(TTFont('Barlow-Bold', '/usr/share/fonts/Barlow-Bold.ttf')) 
pdfmetrics.registerFont(TTFont('Barlow-Medium', '/usr/share/fonts/Barlow-Medium.ttf'))

from SendEmail import *

class VulnerabilityScanning():
    
    Well_Known_Ports = [
        {'port': '21',   'service': 'File Transfer Protocol (FTP)'},
        {'port': '22',   'service': 'Secure Shell (SSH)'},
        {'port': '23',   'service': 'Telnet'},
        {'port': '25',   'service': 'Simple Mail Transfer Protocol (SMTP)'},
        {'port': '80',   'service': 'Hypertext Transfer Protocol (HTTP)'},
        {'port': '110',  'service': 'Post Office Protocol (POP3)'},
        {'port': '111',  'service': 'Open Network Computing Remote Procedure Call (ONC RPC)'},
        {'port': '134',  'service': 'NetBIOS Name Service'},
        {'port': '143',  'service': 'Internet Message Access Protocol (IMAP)'},
        {'port': '443',  'service': 'SSL/TLS (HTTPs)'},
        {'port': '445',  'service': 'Microsoft-DS (SMB)'},
        {'port': '3389', 'service': 'Remote Desktop Protocol (RDP)'},
    ]

    def __init__(self):
        #super(VulnerabilityScanning, self).__init__()
        super().__init__()
    
    def clear(self):
        self.lineEdit_vulner.setText('')
        self.dropdown_typeScan.setCurrentIndex(0)
        self.textEdit_ResultScan.setPlainText('')
        self.lineEdit_commandvulner.setText('')
        self.lineEdit_vulner.setStyleSheet("border: 2px solid black;")
        self.lineEdit_vulner.setPlaceholderText("ex. example.com or IP ")
        self.btn_scanVulner.setEnabled(True)
        self.btn_createReportVulner.setEnabled(False)
        self.progressBar_vulner.setValue(0)

    def showWellKnownPorts(self):
        tmp1 = "Ports"
        tmp2 = "Services"
        for i in range(len(VulnerabilityScanning.Well_Known_Ports)):
            tmp1 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['port']}"
            tmp2 += f"\n{VulnerabilityScanning.Well_Known_Ports[i]['service']}"
        self.label_SimplePorts.setText(tmp1)
        self.label_SimpleServices.setText(tmp2)
        
    def typeScan(self):
        type = self.dropdown_typeScan.currentText()
        #print(type)
        return type

    def validate_input(self, target):

        has_special = any(char in "<>!@#$%^&*()_+-=?&" for char in target)
        if has_special:
            print("Special Characters Detected")
            self.lineEdit_vulner.setPlaceholderText("Invalid Input")
            # wait 2 seconds
            self.lineEdit_vulner.setStyleSheet('''QLineEdit {
  border: 2px solid red;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}''')
            self.lineEdit_vulner.setText('')
            return False
        else:
            self.lineEdit_vulner.setStyleSheet('''QLineEdit {
  border: 2px solid green;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}''')
            return target.lower()
        
    def prepareCommand(self):
        # Check input is empty
        if self.lineEdit_vulner.text() == '':
            print("Data to send Empty")
            self.lineEdit_vulner.setStyleSheet('''QLineEdit {
  border: 2px solid red;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}''')

            self.lineEdit_vulner.setPlaceholderText("Empty ")
            return
        
        valid_input = VulnerabilityScanning.validate_input(self, self.lineEdit_vulner.text())
        if valid_input == False:
            return
        
        # get the type of scan
        type = VulnerabilityScanning.typeScan(self)
        
        # Validate the input
        if 'nmap' in self.lineEdit_vulner.text():
            target = self.lineEdit_vulner.text()
        else:
            target = self.lineEdit_vulner.text()
        
        target = VulnerabilityScanning.validate_input(self, target)
        # Select Type of Scan and set the command
        if type == "Quick Scan":
            option = "-T4 -F" # -T4 = Aggressive, -F = Fast Scan

        elif type == "Stealth Scan":
            option = "-sS" # -sS = Stealth Scan

        elif type == "Aggressive Scan":
            option = "-T4 -A" # -T4 = Aggressive, -A = Agressive Scan Os Detection, Version Detection, Script Scanning, and Traceroute
            
        elif type == "Vulner.NSE Script":
            option = "-sV --script=vulners" 

        else:
            option = "" 
        
        # Set the command in the lineEdit
        self.lineEdit_commandvulner.setText("nmap " + option + " " + target)
        self.lineEdit_commandvulner.setStyleSheet('''QLineEdit {
  border: 1px solid green;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}

QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}
''')
        # Start Scan
        print("Start Scan")
        VulnerabilityScanning.start_scan(self, option, target)

    def start_scan(self, option, target):
        # Get time
        if option == "-T4 -F":
            time_cout = 100
        elif option == "-sS":
            time_cout = 200
        elif option == "-T4 -A":
            time_cout = 1000
        elif option == "-sV --script=vulners":
            time_cout = 1000
        else:
            time_cout = 100
        self.btn_createReportVulner.setEnabled(False)
        self.btn_scanVulner.setEnabled(False)
        self.textEdit_ResultScan.setPlainText('')
        # Progress Bar Update ----------------------------------------------
        VulnerabilityScanning.scan_timer = QTimer(self)
        VulnerabilityScanning.scan_timer.timeout.connect(lambda:VulnerabilityScanning.update_scan_progress(self))
        VulnerabilityScanning.scan_in_progress = False
        VulnerabilityScanning.scan_duration = 0
        VulnerabilityScanning.scan_process = None

        if not VulnerabilityScanning.scan_in_progress:
            VulnerabilityScanning.scan_in_progress = True
            VulnerabilityScanning.scan_duration = 0
            self.progressBar_vulner.setValue(0)
            self.textEdit_ResultScan.setPlainText('')
            VulnerabilityScanning.scan_timer.start(time_cout) # Update every 1 second
            #VulnerabilityScanning.scan_process = Popen(['nmap', *option, target], stdout=PIPE, stderr=PIPE)
            VulnerabilityScanning.scan_thread = threading.Thread(target=VulnerabilityScanning.run_scan, args=(self, option, target))
            VulnerabilityScanning.scan_thread.start()
            #VulnerabilityScanning.run_scan(self, option, target)
        
    def update_scan_progress(self):
        if VulnerabilityScanning.scan_in_progress:
            VulnerabilityScanning.scan_duration += 1
            try:
                if VulnerabilityScanning.scan_duration < 10:
                    # Update the progress bar based on the elapsed time
                    progress = int((VulnerabilityScanning.scan_duration / 10) * 112)
                    self.progressBar_vulner.setValue(progress)
                    #and VulnerabilityScanning.scan_process.poll() is not None
                elif VulnerabilityScanning.scan_process is not None :
                    VulnerabilityScanning.scan_timer.stop()
                    VulnerabilityScanning.scan_in_progress = False

                    # Set the progress bar to 100% when the scan is complete
                    self.progressBar_vulner.setValue(100)
                    self.btn_scanVulner.setEnabled(True)


                    # Read and display the output here
                    while True:
                        line = VulnerabilityScanning.scan_process.stdout.readline().decode("utf-8")
                        if not line:
                            break
                        self.textEdit_ResultScan.append(line)
            except Exception as e:
                print("Error: ", e)
                VulnerabilityScanning.scan_timer.stop()
                VulnerabilityScanning.scan_in_progress = False
                self.progressBar_vulner.setValue(100)
                self.btn_scanVulner.setEnabled(True)
                self.btn_createReportVulner.setEnabled(True)
                self.textEdit_ResultScan.append("Error: " + str(e))

    def run_scan(self, option, target):
        option = option.split()
        try:            
            result = subprocess.check_output(['nmap', *option, target], text=True)
            VulnerabilityScanning.update_result_text(self, result)
        except subprocess.CalledProcessError as e:
            print(f"Scan Error: {e.stderr}")
            VulnerabilityScanning.update_result_text(self, f"Scan Error: {e.stderr}")

    def update_result_text(self, text):
        try:
            cursor = self.textEdit_ResultScan.textCursor()
            cursor.movePosition(QtGui.QTextCursor.MoveOperation.Start)
            cursor.insertText(text)
            self.textEdit_ResultScan.setTextCursor(cursor)
            self.btn_scanVulner.setEnabled(True)
            self.btn_createReportVulner.setEnabled(True)
        except Exception as e:
            print("what ", e)
              
    def chech_output(self):
        if self.progressBar_vulner.value() >= 90:
            self.btn_createReportVulner.setEnabled(True)
        else:
            self.btn_createReportVulner.setEnabled(False)
            
        if self.textEdit_ResultScan.toPlainText() == '':
            print("Data to send Empty")
            self.btn_createReportVulner.setEnabled(False)
            
        else:
            self.btn_createReportVulner.setEnabled(True)
         

    def createReport(self):
        # Create a PDF canvas
        current_time = datetime.now()
        file_name = f"{os.getcwd()}/data/Reports/Vulner_Scanning_Report.pdf"
        self.btn_file_email_vulner.setText(file_name.split('/')[-1]) 
        target = self.lineEdit_vulner.text()
        option_scan = self.dropdown_typeScan.currentText()
        result_scan = self.textEdit_ResultScan.toPlainText()

        if option_scan == "Type Scan":
            option_scan = "Default Scan"
            
        c = canvas.Canvas(file_name, pagesize=A4)
        
        # Define colors
        header_color = colors.HexColor('#A7B6D2')  # Light blue
        title_color = colors.HexColor('#0086D5')   # Dark blue
        text_color = colors.black
        table_color = colors.HexColor('#f1f1f1')


        # Define fonts and font sizes
        font_size = 12
    

        # First Page ----------------------------------------------
        # Header section
        header_text = "| ISAN Security Gizmo Box |"
        c.setFont("Barlow-Regular", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)

        # Logo and main title
        image_path = f'{os.getcwd()}/assets/images/report_logo.png'
        img = ImageReader(image_path)
        img_width, img_height = 250, 200
        img_x = (A4[0] - img_width) / 2
        img_y = (A4[1] - img_height) / 2 + 3 * cm

        c.drawImage(img, img_x, img_y, width=img_width, height=img_height)

        # Main title
        vulner_text = "Vulnerability Scanning Report"
        c.setFont("Barlow-Medium", 20)
        c.setFillColor(text_color)
        vulner_x = (A4[0] - c.stringWidth(vulner_text, "Barlow-Medium", 20)) / 2
        vulner_y = img_y - 30
        c.drawString(vulner_x, vulner_y, vulner_text)

        # Subtitle and current date
        gizmo_text = "                      ISAN Security Gizmo Box"
        gizmo_x = (A4[0] - c.stringWidth(gizmo_text, "Barlow-Medium", 20)) / 2
        gizmo_y = vulner_y - 30

        current_datetime = datetime.now().strftime("%d %B %Y %I:%M %p")
        c.setFont("Barlow-Medium", 15)
        date_x = (A4[0] - c.stringWidth(current_datetime, "Barlow-Regular", 15)) / 2
        date_y = gizmo_y - 30

        #c.setFont("Barlow-Regular", 20)
        c.drawString(gizmo_x, gizmo_y, gizmo_text)
        #c.setFont("Barlow-Regular", 15)
        c.drawString(date_x, date_y, current_datetime)

        # Start a new page (Second Page) ----------------------------------------------
        c.showPage()
        # Second Page Content
        # Redraw the header on the second page
        c.setFont("Barlow-Regular", font_size)
        c.setFillColor(header_color)
        c.drawString(72, A4[1] - 36, header_text)
        
        # Add the "Scan Summary : https://example.com" at the center of the page.
        vulner_summary_text = f"Scan Summary : {target}"
        c.setFont("Barlow-Bold", 16)
        c.setFillColor(title_color)  # Set the text color to dark blue
        text_width = c.stringWidth(vulner_summary_text, "Barlow-Regular", 16)
        text_x = (A4[0] - text_width) / 2
        text_y = (A4[1] - 100)  # Adjust the y-coordinate as needed to center it vertically.

        c.drawString(text_x, text_y, vulner_summary_text)

        # Add the current date and time below the "Scan Summary" text
        date_time_text = datetime.now().strftime("%d %B %Y %I:%M %p")
        c.setFont("Barlow-Bold", 12)
        date_time_x = (A4[0] - c.stringWidth(date_time_text, "Barlow-Regular", 12)) / 2
        date_time_y = text_y - 20  # Adjust the vertical position as needed

        c.drawString(date_time_x, date_time_y, date_time_text)

        nmap_info_text = """        Nmap - Network Mapper is a free and an open source application for network discovery, security auditing application."""
        c.setFont("Barlow-Regular", 9)
        c.setFillColor(text_color)
        nmap_info_x = 72
        nmap_info_y = date_time_y - 30  # Adjust the vertical position as needed
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        nmap_info_text = """This application is available for windows and linux both platforms in GUI and CLI mode. Nmap can also be used for some """
        nmap_info_y -= 12  # reduce the vertical position
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        nmap_info_text = """useful networking tasks like network inventory, service discovery, host OS verification and sometimes for network based """
        nmap_info_y -= 12  # reduce the vertical position
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        nmap_info_text = """virus identification as well."""
        nmap_info_y -= 12  # reduce the vertical position
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        # Define a function to create a section with title and table
        def create_section(data, title_color, col_widths, row_heights, y_offset, is_first_table = True):
            title_font_size = 14
            title_x = 72
            title_y = A4[1] - 30 - 2 * cm - y_offset
            c.setFont("Barlow-Regular", title_font_size)
            c.setFillColor(title_color)
            #c.drawString(title_x, title_y)

            if is_first_table:
                table_background_color = colors.white
            else:
                table_background_color = colors.HexColor('#d94141') 

            table = Table(data, colWidths=col_widths, rowHeights=row_heights)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), table_background_color),
                ('FONTNAME', (0, 0), (-1, -1), 'Barlow-Medium'),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('BOTTOMPADDING', (0, -1), (0, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, table_color),
            ]))
            table.wrapOn(c, 0, 0)
            table.drawOn(c, 80, title_y - 60)
        
        # Head Table 1
        headoOS_text = "Operating System and Scan Mode"
        c.setFont("Barlow-Medium", 12)
        c.setFillColor(title_color)
        headoOS_text_x = 72 
        headoOS_text_y = A4[1] - 210  # indicate the position of the title

        c.drawString(headoOS_text_x, headoOS_text_y, headoOS_text)

        # Section 1: Testing Protocols
        os_data = [
            ['Operating System', 'OS No Detected'],
            ['Scan mode', option_scan],
        ]
        col_widths = [225] * 2
        row_heights = [20] * len(os_data)
        create_section(os_data, title_color, col_widths, row_heights, 120, is_first_table = True)
        
        # Head Table 2
        headoPort_text = "Common Ports"
        c.setFont("Barlow-Medium", 12)
        c.setFillColor(title_color)
        headoPort_text_x = 72 
        headoPort_text_y = A4[1] - 300  # indicate the position of the title

        c.drawString(headoPort_text_x, headoPort_text_y, headoPort_text)
        
        # ------------------ Edit Here ------------------
        # Section 2: Testing Vulnerabilities
        port_data = [
            ['Port', 'Service', 'State'],
            ['21', 'FTP', ''],
            ['22', 'SSH', ''],
            ['23', 'Telnet', ''],
            ['25', 'SMTP', ''],
            ['53', 'DNS', ''],
            ['80', 'HTTP', ''],
            ['110', 'POP3', ''],
            ['111', 'RPC', ''],
            ['134', 'NetBIOS', ''],
            ['143', 'IMAP', ''],
            ['443', 'HTTPS', ''],
            ['445', 'Microsoft-DS', ''],
            ['3389', 'RDP', '']
        ]
        
        ## Fomatting ----------------------------------------------
        # Split the Nmap results into lines and iterate through them
        nmap_lines = result_scan.split('\n')
        updated_port_data = [port_data[0]]  # Initialize with the header row
        for line in nmap_lines:
            if "/tcp" in line:
                parts = line.split()
                port = parts[0].split("/")[0]
                state = "open"
                for row in port_data[1:]:
                    if row[0] == port:
                        row[2] = state
                        updated_port_data.append(row)
                        
        col_widths = [150] * 3
        row_heights = [20] * len(updated_port_data)
        create_section(updated_port_data, title_color, col_widths, row_heights, 450, is_first_table = False)

        port_info_text = """    The recommendations for controlling access and maintaining the security of the above-mentioned ports depend on your usage """
        c.setFont("Barlow-Regular", 9)
        c.setFillColor(colors.HexColor("#f8ac58"))
        port_info_x = 72
        port_info_y = date_time_y - 510 
        c.drawString(port_info_x, port_info_y, port_info_text)

        port_info_text = """and system requirements, and you should use appropriate configurations to mitigate security risks to your system and network."""
        port_info_y -= 12  
        c.drawString(port_info_x, port_info_y, port_info_text)

        
        # Start a new page (Third Page) ----------------------------------------------
        c.showPage()

        # Third Page Content Not Vulnerable
        if option_scan != "Vulner.NSE Script":
            c.save()
            VulnerabilityScanning.convert_pdf_to_png(self)
            return
        
        # Third Page Content
            # Add the "Scan Summary : https://example.com" at the center of the page.
        vulner_summary_text = f"Scan Summary : {target}"
        c.setFont("Barlow-Bold", 16)
        c.setFillColor(title_color)  # Set the text color to dark blue
        text_width = c.stringWidth(vulner_summary_text, "Barlow-Regular", 16)
        text_x = (A4[0] - text_width) / 2
        text_y = (A4[1] - 100)  # Adjust the y-coordinate as needed to center it vertically.
        
        c.drawString(text_x, text_y, vulner_summary_text)
        
        nmap_info_text = """        The vulners.nse script allows you to search for vulnerabilities and security-related information on a network using Nmap.This"""
        c.setFont("Barlow-Regular", 9)
        c.setFillColor(text_color)
        nmap_info_x = 72
        nmap_info_y = date_time_y - 10  # Adjust the vertical position as needed
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        nmap_info_text = """script can scan and retrieve data from Vulners.com, such as Common Vulnerabilities and Exposures (CVEs) and information about """
        nmap_info_y -= 12  # reduce the vertical position
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        nmap_info_text = """security patches and updates. It helps you identify and gather security-related information while scanning a network using Nmap.  """
        nmap_info_y -= 12  # reduce the vertical position
        c.drawString(nmap_info_x, nmap_info_y, nmap_info_text)

        # Define a function to create a section with title and table
        def create_section(data, title_color, score_colors, col_widths, row_heights, y_offset,first_table = True):
            title_font_size = 14
            title_x = 72
            title_y = A4[1] - 30 - 2 * cm - y_offset
            c.setFont("Barlow-Regular", title_font_size)
            c.setFillColor(title_color)
            #c.drawString(title_x, title_y)

            if first_table:
                table_background_color = colors.white
            else:
                table_background_color = colors.HexColor('#d94141')

            table = Table(data, colWidths=col_widths, rowHeights=row_heights)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), table_background_color),
                ('FONTNAME', (0, 0), (-1, -1), 'Barlow-Medium'),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('BOTTOMPADDING', (0, -1), (0, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, table_color),
            ]))
            
            if first_table:
                for i, row_color in enumerate(score_colors):
                    for j in range(len(data[i])):
                        table.setStyle([
                        ('TEXTCOLOR', (j, i), (j, i), row_color)
                ])
            
            
            table.wrapOn(c, 0, 0)
            table.drawOn(c, 80, title_y - 50)
        
        # Head Table 1
        score_text = "CVSS (Common Vulnerability Scoring System) Score"
        c.setFont("Barlow-Medium", 12)
        c.setFillColor(title_color)
        score_text_x = 72 
        score_text_y = A4[1] - 190  # indicate the position of the title

        c.drawString(score_text_x, score_text_y, score_text)

        # Section 1: Testing Protocols
        score_data = [
            ['Low', '0.0 - 3.9'],
            ['Medium', '4.0 - 6.9'],
            ['High', '7.0 - 8.9'],
            ['Critical', '9.0 - 10.0'],
        ]
        col_widths = [225] * 2
        row_heights = [20] * 4 
        score_colors = [colors.HexColor('#f8ac58'), colors.HexColor('#fc6a03'), colors.HexColor('#d94141'), colors.HexColor('#5c1ba2')]
        create_section(score_data, title_color, score_colors, col_widths, row_heights, 150,first_table = True)

        # Head Table 2
        headoPort_text = "Common Vulnerabilities and Exposures"
        c.setFont("Barlow-Medium", 12)
        c.setFillColor(title_color)
        headoPort_text_x = 72 
        headoPort_text_y = A4[1] - 320  # indicate the position of the title

        c.drawString(headoPort_text_x, headoPort_text_y, headoPort_text)

        # ------------------ Edit Here ------------------
        # Section 2: Testing Vulnerabilities
         
        cve_pattern = r"CVE-(?:2022|2023)-\d{4,}"
        score_pattern = r"\d+\.\d"
        cve_data = []

        cve_matches = re.findall(cve_pattern, result_scan)
        score_matches = re.findall(score_pattern, result_scan)

        # add the matches to the cve_data list not more than 20 and not get same CVE
        for cve, score in zip(cve_matches, score_matches):
            entry = [cve, float(score)]
            cve_data.append(entry)

        # for cve, score in zip(cve_matches, score_matches):
        #     entry = [cve, float(score)]
        #     cve_data.append(entry)

        # ------------------ Edit Here ------------------
        col_widths = [225] * 3
        row_heights = [20] * len(cve_data) 
        create_section(cve_data, title_color, score_colors, col_widths, row_heights, 600, first_table = False)

        cve_info_text = """    You can check for Common Vulnerabilities and Exposures (CVEs) on Vulners.com by visiting their website and using their search  """
        c.setFont("Barlow-Regular", 9)
        c.setFillColor(colors.HexColor("#f8ac58"))
        cve_info_x = 72
        cve_info_y = date_time_y - 650 
        c.drawString(cve_info_x, cve_info_y, cve_info_text)

        cve_info_text = """feature. Vulners provides a user-friendly web interface for searching and browsing CVEs and other security-related information. """
        cve_info_y -= 12  # reduce the vertical position
        c.drawString(cve_info_x, cve_info_y, cve_info_text)

        detailCVE = "https://vulners.com/cve/"
        cve_info_text = f"""Here is the link to Vulners.com's CVE database search: {detailCVE}"""
        cve_info_y -= 12  # reduce the vertical position
        c.drawString(cve_info_x, cve_info_y, cve_info_text)

        # Save the PDF
        c.save()

        VulnerabilityScanning.convert_pdf_to_png(self)

    def send_email(self):
        self.btn_sendReport_email_vulner.setText("Sent!")

        to_receiver_email = self.lineEdit_to_email_vulner.text()
        subject_receiver = self.lineEdit_subject_email_vulner.text()
        body = self.textEdit_body_email_vulner.toPlainText()
        file = f"{os.getcwd()}/data/Reports/Vulner_Scanning_Report.pdf"
        
        valid_email = SendEmail.validate_email(self, to_receiver_email)
        if valid_email == False:
            self.lineEdit_to_email_vulner.setText('')
            self.lineEdit_to_email_vulner.setStyleSheet('''QLineEdit {
  border: 1px solid red;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}
QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}''')
        else:
            self.lineEdit_to_email_vulner.setStyleSheet('''QLineEdit {
  border: 1px solid green;
  color: rgba(40,43,61,255);
  border-radius: 5px;
}
QLineEdit:hover {
  border: 2px solid;
  border-color: rgba(0,143,255,255);
}
QLineEdit:focus {
  border: 1px solid;
  border-color: rgba(88,199,141,255);
}''')
            # if send email success then remove file
            SendEmail.sending(SendEmail, to_receiver_email, subject_receiver, body, file)
            VulnerabilityScanning.remove_file(self, file)

    def remove_file(self, file):
        #remove pdf and png
        subprocess.run(["rm", file])

        for i in range(10):
            subprocess.run(["rm", f"{os.getcwd()}/data/ImagesfromPDF/output_page_vulner_{i}.png"]) 

    def convert_pdf_to_png(self):
        import os
        import fitz

        # Path to PDF file
        pdf_file = f"{os.getcwd()}/data/Reports/Vulner_Scanning_Report.pdf"

        # Open PDF file
        pdf_doc = fitz.open(pdf_file)

        # Output directory
        output_dir = f"{os.getcwd()}/data/ImagesfromPDF/"  # Corrected path

        # Iterate through pages and convert to PNG
        for page_number, page in enumerate(pdf_doc):
            pix = page.get_pixmap()
            output_file = os.path.join(output_dir, f"output_page_vulner_{page_number}.png")
            pix.save(output_file, "png")

        # Close PDF file
        pdf_doc.close()

        self.label_report_vulner.setPixmap(QtGui.QPixmap(f"{os.getcwd()}/data/ImagesfromPDF/output_page_vulner_0.png"))
        self.label_countPageReport_vulner.setText("0")

    def set_pdf_viewer(self, step):
        page_number = self.label_countPageReport_vulner.text()
        min_page = 0

        number = 0
        if step == "next":
            number = int(page_number) + 1
        elif step == "back":
            number = int(page_number) - 1
            number = max(number, min_page)
        else:
            number = 0

        self.label_countPageReport_vulner.setText(str(number))
        self.label_report_vulner.setPixmap(QtGui.QPixmap(f"{os.getcwd()}/data/ImagesfromPDF/output_page_vulner_{number}.png"))
            
            
