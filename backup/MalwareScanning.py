import json
import os
import re
import sys
import time
import requests
from fpdf import FPDF
import datetime

from PyQt6.uic import loadUi
from PyQt6.QtWidgets import QApplication, QDialog, QFileDialog, QMessageBox
from PyQt6.QtGui import QPixmap, QIcon
from pathlib import Path
from urllib.parse import urlparse
from PyQt6.QtWidgets import QTableWidget, QTableWidgetItem
from PyQt6.QtCore import Qt, QAbstractTableModel, QVariant
from PyQt6.QtWidgets import QApplication, QTableView

class MyTableModel(QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data
        self._headers = list(data.keys())
        print(self._headers)

    def rowCount(self, parent):
        return len(self._data)

    def columnCount(self, parent):
        return 4

    def headerData(self, section, orientation, role):
        if role == Qt.ItemDataRole.DisplayRole:
            if orientation == Qt.Orientation.Horizontal:
                #return str(["Tools Name", "Detected"][section])
                return str(["Tools Name", "Detected", "Update", "Version"][section])
            else:
                return str(section + 1)
        return QVariant()

    def data(self, index, role):
        if role == Qt.ItemDataRole.DisplayRole:
            row = index.row()
            column = index.column()
            if column == 0:
                return str(self._headers[row])
            elif column == 1:
                value = self._data[self._headers[row]]["result"]
                return str(value)
            try:
                if column == 2:
                    value = self._data[self._headers[row]]["update"]
                    return str(value)
                elif column == 3:
                    value = self._data[self._headers[row]]["version"]
                    return str(value)
            except:
                pass
            
        return QVariant()
    

class MalwareScanning(QDialog):
    # Initialize properties
    api_key = 'e8cf03a48915da2f70adfb45ae906ce940e837c47ba572bb30a8f1b8573df8e8'
    
    def __init__(self):
        super(MalwareScanning, self).__init__()
        loadUi("./assets/ui/Malware_Scanning.ui", self)
        self.setWindowTitle('Malware Scanning')
        self.window_icon = QIcon("./assets/icons/logo.png")
        self.logo = QPixmap("./assets/icons/logo.png")

        ## Run on Kalilinux
        '''
        loadUi("/home/kali/Gizmo/Files/Malware_Scanning.ui", self)
        self.setWindowTitle('/home/kali/Gizmo/Malware Scanning')
        self.window_icon = QIcon("/home/kali/Gizmo/Images/logo.png")
        self.logo = QPixmap("/home/kali/Gizmo/Images/logo.png")
        '''
        
        self.setWindowIcon(self.window_icon)
        self.logo_Label.setPixmap(self.logo)
        
        # Event Clicked
        self.scan_Button.clicked.connect(self.scan_file_url)
        self.clear_Button.clicked.connect(self.clear)
        self.export_Button.clicked.connect(self.export_to_pdf)
        self.browse_Button.clicked.connect(self.browse_file)
        
        

    # Clear the URL and file upload fields and the result text edit
    def clear(self):
        """Clear the URL and file upload fields and the result text edit."""
        self.input_text.clear()
        self.output_name_Label.setText("--")
        self.output_size_Label.setText("--")
        self.output_type_Label.setText("--")
        self.output_date_Label.setText("--")
        
        self.namefile_Label.setText("NAME")
        self.size_Label.setText("SIZE")
        self.type_Label.setText("TYPE")
        self.date_Label.setText("DATA")
        
        self.clearTable_status = True
        
    # browse file section ---------------------------------------------------
    def browse_file(self):
        current_dir = os.getcwd()
        file_path, _ = QFileDialog.getOpenFileName(self, 'Open file', current_dir, 'All files (*.*)')
        if file_path:
            self.input_text.setText(file_path)
        
    # scan file or url section -----------------------------------------------
    def scan_file_url(self):
        clearTable_status = False
        type_scan = "URL"
        print(type_scan)
        
        api_key = 'e8cf03a48915da2f70adfb45ae906ce940e837c47ba572bb30a8f1b8573df8e8'
        # malicous_sites = ["https://trycracksetup.com", "https://www.cracksetup.com", "https://idmcrackeys.com"]
        
        # Define the pattern to match the URL or file 
        url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        # file_pattern = re.compile(r'^[A-Za-z]:|^(\/[A-Za-z0-9_]+)+\/?$')
        file_pattern = re.compile(r'^[A-Za-z]:|^(\/[A-Za-z0-9_]+)+\/?$')
        
        input = self.input_text.text()
        print(input)
        # Check if the input is empty or not match the pattern
        if input == "" or file_pattern.match(input) == None and url_pattern.match(input) == None :
            return QMessageBox.warning(self, "Warning", "Please enter the URL or file path")
        
        if url_pattern.match(input):
            #print('URL')
            print(f"URL, scanning...")
            type_scan = "URL"
            domain = urlparse(input).netloc.split(':')[0]
            # domain = re.search('https?://(?:www\.)?(.+?)/', input).group(0)
            print(f"Domain: {domain}")
            
            # scan url
            url = 'https://www.virustotal.com/vtapi/v2/url/scan'
            params = {'apikey': api_key, 'url': url}
            response = requests.post(url, data=params)
            print(response.json())
            
            #date = response.json().get("scan_date")
            date = str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            # print(f"Date: {date}")
            
            #get report after scaned form url
            url = 'https://www.virustotal.com/vtapi/v2/url/report'
            params = {'apikey': api_key, 'resource': self.input_text.text()}  # url self.input_text.text()
            response = requests.get(url, params=params)
            #print(response.json())
            
            for i in response.json().get("scans"):
                print(f"Name: {i} - {response.json().get('scans').get(i).get('detected')} \t | \t Result:{response.json().get('scans').get(i).get('result')}")
            
            print(f"Scan ID: {response.json().get('scan_id')} Success........")
            
            #set result to label
            self.output_name_Label.setText(input)
            self.namefile_Label.setText("URL:")
            
            self.output_date_Label.setText(date)
            self.date_Label.setText("DATE:")
            
            self.output_size_Label.setText(domain)
            self.size_Label.setText("DOMAIN:")
            
            
            self.output_type_Label.setText(str(response.json().get("total")))
            self.type_Label.setText("TOTAL:")

            #self.display_data_in_table(response.json().get("scans"))
            data = response.json().get("scans")
            
            #view = QTableView()
            model = MyTableModel(data)
            self.tableView.setModel(model)
            
        elif file_pattern.match(input):
            #print('File')
            type_scan = "File"
            try:
                print(f"File, scanning...")
                url = 'https://www.virustotal.com/vtapi/v2/file/scan'
                params = {'apikey': api_key}
                files = {'file': (input, open(input, 'rb'))}
                response = requests.post(url, files=files, params=params)            
                resource = response.json().get("resource")
                #print(f"Resource: {resource}")
                # get report from file scaned
                url = 'https://www.virustotal.com/vtapi/v2/file/report'
                params = {'apikey': api_key, 'resource': resource}
                response = requests.get(url, params=params)
                print(response.json())

                # prepare the result text edit contents
                file_size = os.path.getsize(input)
                if file_size:
                    file_size = f"{file_size} Bytes"
                    self.output_size_Label.setText(file_size)
                    
                file_type = os.path.splitext(input)[1]
                if file_type:
                    self.output_type_Label.setText(file_type.replace(".", "").upper())
                
                file_name = os.path.basename(input)
                if file_name:
                    self.output_name_Label.setText(file_name)
                
                #date = response.json().get("scan_date")

                # from datetime import datetime

                # date_string = "20230904"
                # date_object = datetime.strptime(date_string, "%Y%m%d")
                # formatted_date = date_object.strftime("%d-%B-%Y")
                # print(formatted_date)

                date = str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                if date:
                    self.output_date_Label.setText(date)
                                                            
                for i in response.json().get("scans"):
                    print(f"Name: {i} - {response.json().get('scans').get(i).get('detected')} \t | \t Result: - {response.json().get('scans').get(i).get('result')}")
                    
                print(f"Scan ID: {response.json().get('scan_id')} Success........")
                
            except:
                print("Invalid input")
                
        else:
            print('Invalid input')
           
        if type_scan == "URL":
            data = response.json().get("scans")
            model = MyTableModel(data)
            self.tableView.setModel(model)   
        elif type_scan == "File":
            data = response.json().get("scans")
            model = MyTableModel(data)
            self.tableView.setModel(model) 
            
    def display_data_in_table(self, data_dict):
    # Create a QTableWidget with 1 row and 3 columns
    
    # Set the headers for the columns
        self.tableView.setHorizontalHeaderLabels(["Name Tools Scan", "detected", "result", "update", "version"] )

        # Set the data for the row
        for tool, result in data_dict.items():
            row_position = self.tableView.rowCount()
            self.tableView.insertRow(row_position)
            self.tableView.setItem(row_position, 0, QTableWidgetItem(tool))
            self.tableView.setItem(row_position, 1, QTableWidgetItem(str(result["detected"])))
            self.tableView.setItem(row_position, 2, QTableWidgetItem(result["result"]))
            self.tableView.setItem(row_position, 3, QTableWidgetItem(result["update"]))
            self.tableView.setItem(row_position, 4, QTableWidgetItem(result["version"]))
            
        # Show the table
        self.tableView.show()
    
    # Export the result text edit contents to a PDF file section ------------------
    def export_to_pdf(self):
        """Export the result text edit contents to a PDF file."""
        # file_path, _ = QFileDialog.getSaveFileName(self, 'Save file', '', 'PDF files (*.pdf)')
        # if file_path:
        #     pdf = FPDF()
        #     pdf.add_page()
        #     pdf.set_font('Arial', 'B', 16)
        #     pdf.cell(40, 10, 'Scan Result')
        #     pdf.ln()
        #     pdf.set_font('Arial', '', 12)
        #     for line in self.result_edit.toPlainText().split('\n'):
        #         pdf.cell(0, 10, line)
        #         pdf.ln()
        #     pdf.output(file_path, 'F')
        #     QMessageBox.information(self, 'Export', f'File exported to {file_path}')
        response = {
            "Bkav":{
                "detected":"false",
                "result":"unrated site"
            },
            "OpenPhish":{
                "detected":"false",
                "result":"clean site"
            },
            "VX Vault":{
                "detected":"false",
                "result":"clean site"
            },
            "Feodo Tracker":{
                "detected":"false",
                "result":"clean site"
            },
            "Web Security Guard":{
                "detected":"false",
                "result":"clean site"
            },
            "Scantitan":{
                "detected":"false",
                "result":"clean site"
            },
            "AlienVault":{
                "detected":"false",
                "result":"clean site"
            },
            "Sophos":{
                "detected":"false",
                "result":"clean site"
            },
            "Phishtank":{
                "detected":"false",
                "result":"clean site"
            },
            "CyberCrime":{
                "detected":"false",
                "result":"clean site"
            },
        }
        
        file_path, _ = QFileDialog.getSaveFileName(self, 'Save file', '', 'PDF files (*.pdf)')
        if file_path:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(40, 10, 'Scan Result')
            pdf.ln()
            pdf.set_font('Arial', '', 12)
            for key, value in response.items():
                pdf.cell(0, 10, f"{key}: {value}")
                pdf.ln()
            pdf.output(file_path, 'F')
            saved_alert = QMessageBox()
            saved_alert.setStyleSheet("QMessageBox { background-color: white; }")
            saved_alert.setWindowIcon(QIcon("./Files/Bonus.png"))
            ## Run on Kalilinux
            # saved_alert.setWindowIcon(QIcon("/home/kali/Gizmo/Files/Bonus.png"))
            saved_alert.information(self, 'Export', f'File exported to {file_path}')
            
            

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MalwareScanning()
    window.setFixedHeight(700)
    window.setFixedWidth(1200)
    window.setMinimumSize(1200, 700)
    window.setMaximumSize(1200, 700)
    window.show()
    sys.exit(app.exec())     



